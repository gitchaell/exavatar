---
import '../styles/global.css'
// import { ViewTransitions } from 'astro:transitions'
import Icon from '../components/Icon.astro'
import GridPattern from '../components/GridPattern.astro'

interface Props {
	title?: string
	description?: string
	image?: string
	url?: string
	type?: 'website' | 'article'
	noindex?: boolean
}

const {
	title = 'Exavatar - Dynamic Avatar Generation API',
	description = 'Generate beautiful, customizable avatars instantly with our powerful API. Built with Deno and Astro for lightning-fast performance.',
	image = '/og-image.png',
	url = Astro.url.href,
	type = 'website',
	noindex = false,
} = Astro.props

const canonicalUrl = new URL(url, Astro.site).href
const ogImage = new URL(image, Astro.site).href
---

<!doctype html>
<html
	lang='en'
	class='h-full'>
	<head>
		<meta charset='UTF-8' />
		<meta
			name='viewport'
			content='width=device-width, initial-scale=1.0'
		/>
		<meta
			name='generator'
			content={Astro.generator}
		/>

		<title>{title}</title>
		<meta
			name='title'
			content={title}
		/>
		<meta
			name='description'
			content={description}
		/>
		<meta
			name='keywords'
			content='avatar, API, generator, dynamic, customizable, Deno, Astro, profile picture, image generation'
		/>
		<meta
			name='author'
			content='Michaell Alavedra'
		/>
		<link
			rel='canonical'
			href={canonicalUrl}
		/>

		{
			noindex && (
				<meta
					name='robots'
					content='noindex, nofollow'
				/>
			)
		}

		<meta
			property='og:type'
			content={type}
		/>
		<meta
			property='og:url'
			content={canonicalUrl}
		/>
		<meta
			property='og:title'
			content={title}
		/>
		<meta
			property='og:description'
			content={description}
		/>
		<meta
			property='og:image'
			content={ogImage}
		/>
		<meta
			property='og:image:width'
			content='1200'
		/>
		<meta
			property='og:image:height'
			content='630'
		/>
		<meta
			property='og:site_name'
			content='Exavatar'
		/>

		<meta
			property='twitter:card'
			content='summary_large_image'
		/>
		<meta
			property='twitter:url'
			content={canonicalUrl}
		/>
		<meta
			property='twitter:title'
			content={title}
		/>
		<meta
			property='twitter:description'
			content={description}
		/>
		<meta
			property='twitter:image'
			content={ogImage}
		/>

		<link
			rel='icon'
			type='image/svg+xml'
			href='/favicon.svg'
		/>

		<script is:inline type='application/ld+json'>
			{
				"@context": "https://schema.org",
				"@type": "WebApplication",
				"name": "Exavatar",
				"description": "Dynamic avatar generation API built with Deno and Astro for creating beautiful, customizable profile pictures",
				"url": "https://exavatar.deno.dev",
				"applicationCategory": "DeveloperApplication",
				"operatingSystem": "Web",
				"offers": {
					"@type": "Offer",
					"price": "0",
					"priceCurrency": "USD"
				},
				"creator": {
					"@type": "Person",
					"name": "Michael Alavedra",
					"url": "https://github.com/gitchaell"
				}
			}
		</script>

		<script is:inline>
			;(() => {
				try {
					const stored = localStorage.getItem('exavatar.themeMode')

					if (stored ? stored === 'dark' : matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark')
					}
				} catch (_) {
					// Ignorar errores de localStorage
				}

				const apply = (dark) => {
					document.documentElement.classList.toggle('dark', dark)

					try {
						localStorage.setItem('exavatar.themeMode', dark ? 'dark' : 'light')
					} catch (_) {
						// Ignorar errores de localStorage
					}
				}

				document.addEventListener('basecoat:theme', (event) => {
					const mode = event.detail?.mode
					apply(
						mode === 'dark' ? true
						: mode === 'light' ? false
						: !document.documentElement.classList.contains('dark'),
					)
				})
			})()
		</script>

		<!-- <ViewTransitions /> -->
	</head>

	<body
		class='grid h-[200dvh] min-h-screen grid-cols-12 overflow-x-hidden overflow-y-auto bg-transparent bg-repeat'>
		<nav class='contents'>
			<a
				href='/'
				class='grid-box grid-cross-br col-[1/5] row-[1/2] place-content-center text-center text-2xl font-bold italic md:col-[3/5] md:row-[1/2]'>
				Exavatar
			</a>

			<div
				class='grid-box col-[1/13] row-[2/3] grid auto-cols-max grid-flow-col items-center justify-center gap-2 overflow-x-auto overflow-y-hidden px-1 md:col-[5/9] md:row-[1/2]'>
				<a
					href='/playground'
					class='btn-ghost'
					aria-current='page'>
					Playground
				</a>

				<a
					href='/gallery'
					class='btn-ghost'
					aria-current='page'>
					Gallery
				</a>

				<a
					href='/docs'
					class='btn-ghost'
					aria-current='page'>
					Docs
				</a>

				<a
					href='/about'
					class='btn-ghost'
					aria-current='page'>
					About
				</a>
			</div>

			<div
				class='grid-box col-[5/13] row-[1/2] grid auto-cols-max grid-flow-col items-center justify-end gap-2 px-2 md:col-[9/11] md:row-[1/2]'>
				<button
					type='button'
					aria-label='Toggle dark mode'
					data-tooltip='Toggle dark mode'
					data-side='left'
					onclick="document.dispatchEvent(new CustomEvent('basecoat:theme'))"
					class='btn-icon-outline size-8'>
					<span class='hidden dark:block'><Icon name='sun' /></span>
					<span class='block dark:hidden'><Icon name='moon' /></span>
				</button>

				<a
					href='https://github.com/gitchaell/exavatar'
					target='_blank'
					aria-label='GitHub Respository'
					data-tooltip='GitHub Repository'
					data-side='left'
					class='btn-icon-outline size-8'>
					<Icon name='github' />
				</a>
			</div>
		</nav>

		<slot />

		<div
			id='toaster'
			class='toaster'>
		</div>

		<GridPattern />

		<script
			is:inline
			src='/js/basecoat/all.min.js'
			defer
		></script>

		<script
			is:inline
			src='https://app.rybbit.io/api/script.js'
			data-site-id='1711'
			defer
		></script>
	</body>
</html>
