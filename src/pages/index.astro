---
import { avatarSets, getDefaultAvatarSet } from '../core/domain/AvatarSet'
import { avatarIds, getDefaultAvatarId } from '../core/domain/AvatarId'
import { avatarSizes } from '../core/domain/AvatarSize'
import { avatarFormats, defaultAvatarFormat } from '../core/domain/AvatarFormat'
import { defaultAvatarText } from '../core/domain/AvatarText'
import { defaultAvatarColor } from '../core/domain/AvatarColor'
import Code from '../components/Code.astro'
import Layout from '../layouts/Layout.astro'
import Icon from '../components/Icon.astro'

const searchParams = Astro.url.searchParams
const hasSearchParams = searchParams.size > 0

const params =
	hasSearchParams ?
		{
			set: searchParams.get('set') || '',
			id: searchParams.get('id') || '',
			size: searchParams.get('size') || '',
			format: searchParams.get('format') || '',
			text: searchParams.get('text') || '',
			color: searchParams.get('color') || '',
		}
	:	{
			set: getDefaultAvatarSet().toString(),
			id: getDefaultAvatarId().toString(),
			size: '256',
			format: defaultAvatarFormat.toString(),
			text: defaultAvatarText.toString(),
			color: defaultAvatarColor.toString(),
		}

const path = `/api/avatar?${new URLSearchParams(params).toString()}`
const code = `https://exavatar.deno.dev${path}`
---

<Layout>
	<header
		class='grid-box grid grid-flow-row auto-rows-min content-center col-[1/13] row-[3/5] md:col-[3/11] md:row-[2/4]'>
		<h2 class='text-3xl content-end text-center font-semibold'>Playground</h2>
		<p class='text-md content-center text-center text-pretty'>
			Use the avatar API to generate dynamic images.
		</p>
	</header>

	<main class='contents'>
		<section class='grid-box relative col-[3/11] row-[6/12] md:col-[4/6] md:row-[6/12]'>
			<span class='badge-secondary absolute z-20 top-2 right-2'>{params.size}x{params.size}</span>

			<img
				id='preview'
				class='block mx-auto p-1 h-full absolute z-10 inset-0 aspect-square object-cover'
				src={path}
				alt={'Preview:' + params.set + ':' + params.id}
			/>
		</section>

		<form
			method='GET'
			action=''
			class='contents'>
			<div class='grid-box grid px-2 col-[2/12] row-[13/14] md:col-[7/10] md:row-[5/6]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Set</span>

					<select
						name='set'
						id='avatar-set'
						class='select w-full col-[4/11] md:col-[2/4]'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarSets.map((set) => (
								<option
									value={set}
									selected={params.set === set}>
									{set}
								</option>
							))
						}
					</select>
				</label>
			</div>

			<div class='grid-box grid px-2 col-[2/12] row-[14/15] md:col-[7/10] md:row-[6/7]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Id</span>

					<select
						name='id'
						id='avatar-id'
						class='select w-full col-[4/11] md:col-[2/4]'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarIds.map((id) => (
								<option
									value={id}
									selected={params.id === id}>
									{id}
								</option>
							))
						}
					</select>
				</label>
			</div>

			<div class='grid-box grid px-2 col-[2/12] row-[15/16] md:col-[7/10] md:row-[7/8]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Size</span>

					<select
						name='size'
						id='avatar-size'
						class='select w-full col-[4/11] md:col-[2/4]'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarSizes.map((size) => (
								<option
									value={size}
									selected={+params.size === +size}>
									{size}
								</option>
							))
						}
					</select>
				</label>
			</div>

			<div class='grid-box grid px-2 col-[2/12] row-[16/17] md:col-[7/10] md:row-[8/9]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Format</span>

					<select
						name='format'
						id='avatar-format'
						class='select w-full col-[4/11] md:col-[2/4]'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarFormats.map((format) => (
								<option
									value={format}
									selected={params.format === format}>
									{format}
								</option>
							))
						}
					</select>
				</label>
			</div>

			<div class='grid-box grid px-2 col-[2/12] row-[17/18] md:col-[7/10] md:row-[9/10]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Text</span>

					<input
						name='text'
						id='avatar-text'
						type='text'
						maxlength='2'
						class='input w-full col-[4/11] md:col-[2/4]'
						value={params.text}
						onchange='this.form.submit()'
					/>
				</label>
			</div>

			<div class='grid-box grid px-2 col-[2/12] row-[18/19] md:col-[7/10] md:row-[10/11]'>
				<label class='label grid grid-cols-10 md:grid-cols-3'>
					<span class='col-[1/4] md:col-[1/2]'><span class='font-light'>Avatar.</span>Color</span>

					<input
						name='color'
						id='avatar-color'
						type='color'
						class='input w-full col-[4/11] md:col-[2/4]'
						value={params.color}
						onchange='this.form.submit()'
					/>
				</label>
			</div>

			<div
				class='grid-box grid grid-cols-2 items-center gap-2 px-2 col-[2/12] row-[20/21] md:col-[7/10] md:row-[12/13]'>
				<button
					type='button'
					class='btn btn-secondary'
					onclick='
						document.querySelectorAll("input, select").forEach(el => {
							if (el.type === "radio" || el.type === "checkbox") {
								el.checked = false;
							} else {
								el.value = "";
							}
						});
						this.form.submit();
					'>
					Reset
				</button>

				<button
					type='button'
					class='btn btn-primary'
					onclick='window.location.replace("/")'>
					<Icon name='dice' />
					Random
				</button>
			</div>
		</form>

		<Code
			class='grid-box text-center content-center overflow-hidden p-3 col-[1/13] row-[22/24] md:row-[14/16] md:col-[3/11]'
			code={code}
		/>
	</main>
</Layout>
