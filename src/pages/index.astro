---
import Code from '../components/Code.astro'
import Layout from '../layouts/Layout.astro'
import { avatarSets, getDefaultAvatarSet } from '../core/domain/AvatarSet'
import { avatarIds, getDefaultAvatarId } from '../core/domain/AvatarId'
import { avatarSizes } from '../core/domain/AvatarSize'
import { avatarFormats, defaultAvatarFormat } from '../core/domain/AvatarFormat'
import { defaultAvatarText } from '../core/domain/AvatarText'
import { defaultAvatarColor } from '../core/domain/AvatarColor'
import Icon from '../components/Icon.astro'

const searchParams = Astro.url.searchParams
const hasSearchParams = searchParams.size > 0

const params =
	hasSearchParams ?
		{
			set: searchParams.get('set') || '',
			id: searchParams.get('id') || '',
			size: searchParams.get('size') || '',
			format: searchParams.get('format') || '',
			text: searchParams.get('text') || '',
			color: searchParams.get('color') || '',
		}
	:	{
			set: getDefaultAvatarSet().toString(),
			id: getDefaultAvatarId().toString(),
			size: '256',
			format: defaultAvatarFormat.toString(),
			text: defaultAvatarText.toString(),
			color: defaultAvatarColor.toString(),
		}

const path = `/api/avatar?${new URLSearchParams(params).toString()}`
const code = `https://exavatar.deno.dev${path}`
---

<Layout title='Exavatar'>
	<main class='p-6 max-w-5xl mx-auto'>
		<h1 class='text-3xl font-bold mb-4'>
			Welcome to <strong>Exavatar</strong>
		</h1>

		<p class='mb-6'>Use the avatar API to generate dynamic images.</p>

		<form
			method='GET'
			action=''
			class='flex flex-col md:flex-row gap-6'>
			<div class='flex-1 flex items-center justify-center'>
				<img
					id='preview'
					class='border rounded w-64 h-64 object-cover'
					src={path}
					alt='Preview'
				/>
			</div>

			<div class='flex-1 form space-y-2'>
				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Set</span>

					<select
						name='set'
						id='avatar-set'
						class='select w-full'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarSets.map((set) => (
								<option
									value={set}
									selected={params.set === set}>
									{set}
								</option>
							))
						}
					</select>
				</label>

				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Id</span>

					<select
						name='id'
						id='avatar-id'
						class='select w-full'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarIds.map((id) => (
								<option
									value={id}
									selected={params.id === id}>
									{id}
								</option>
							))
						}
					</select>
				</label>

				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Size</span>

					<select
						name='size'
						id='avatar-size'
						class='select w-full'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarSizes.map((size) => (
								<option
									value={size}
									selected={+params.size === +size}>
									{size}
								</option>
							))
						}
					</select>
				</label>

				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Format</span>

					<select
						name='format'
						id='avatar-format'
						class='select w-full'
						onchange='this.form.submit()'>
						<option value=''></option>
						{
							avatarFormats.map((format) => (
								<option
									value={format}
									selected={params.format === format}>
									{format}
								</option>
							))
						}
					</select>
				</label>

				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Text</span>

					<input
						name='text'
						id='avatar-text'
						type='text'
						maxlength='2'
						class='input w-full'
						value={params.text}
						onchange='this.form.submit()'
					/>
				</label>

				<label class='label'>
					<span class='min-w-[100px]'>Avatar.Color</span>

					<input
						name='color'
						id='avatar-color'
						type='color'
						class='input w-full'
						value={params.color}
						onchange='this.form.submit()'
					/>
				</label>

				<div class='flex gap-2 pt-2'>
					<button
						type='button'
						class='btn btn-secondary flex-1'
						onclick='
							document.querySelectorAll("input, select").forEach(el => {
								if (el.type === "radio" || el.type === "checkbox") {
									el.checked = false;
								} else {
									el.value = "";
								}
							});
							this.form.submit();
						'>
						Reset
					</button>

					<button
						type='button'
						class='btn btn-primary flex-1'
						onclick='window.location.replace("/")'>
						<Icon name='dice' />
						Random
					</button>
				</div>
			</div>
		</form>

		<p class='mt-4 break-words'>
			<Code code={code} />
		</p>
	</main>
</Layout>
